"""initial

Revision ID: 610035d31b67
Revises: 
Create Date: 2023-04-17 01:05:34.548680

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '610035d31b67'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.create_table(
        'users',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('login', sa.String(length=50), nullable=False),
        sa.Column('password', sa.Text(), nullable=False),
        sa.Column('first_name', sa.Text(), nullable=False),
        sa.Column('last_name', sa.Text(), nullable=False),
        sa.Column('is_admin', sa.Boolean(), default=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('login'),
    )

    op.create_table(
        'history',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('user_id', sa.UUID(), nullable=False),
        sa.Column('user_agent', sa.Text(), nullable=False),
        sa.Column('user_device_type', sa.Text(), nullable=False),
        sa.Column('auth_date', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id', 'user_device_type'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'],
                                name='history_fkey', ondelete="CASCADE"),
        sa.UniqueConstraint('id', 'user_device_type'),
        postgresql_partition_by='LIST (user_device_type)'
    )
    op.execute(
        """CREATE TABLE IF NOT EXISTS "history_tablet" PARTITION OF "history" FOR VALUES IN ('tablet')"""),
    op.execute(
        """CREATE TABLE IF NOT EXISTS "history_mobile" PARTITION OF "history" FOR VALUES IN ('mobile')"""),
    op.execute(
        """CREATE TABLE IF NOT EXISTS "history_web" PARTITION OF "history" FOR VALUES IN ('web')"""),

    op.create_table(
        'roles',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('role', sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint('id'),
    )

    op.create_table(
        'users_roles',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('user_id', sa.UUID(), nullable=False),
        sa.Column('role_id', sa.UUID(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
    )

    op.create_table(
        'oauth_users',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('user_id', sa.UUID(), nullable=False),
        sa.Column('oauth_id', sa.Text(), nullable=False),
        sa.Column('oauth_email', sa.Text(), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
        sa.UniqueConstraint('oauth_id', 'oauth_email', name='oauth_unique'),
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###
