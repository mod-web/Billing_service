version: '3.10'

services:
  billing_service:
    build: ./billing_service
    env_file:
      - ./billing_service/.env
    volumes:
      - ./billing_service:/app

  billing_postgres:
    image: postgres:alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - ./.env
#    environment:
#      POSTGRES_DB: "${DB_NAME}"
#      POSTGRES_USER: "${DB_USER}"
#      POSTGRES_PASSWORD: "${DB_PASSWORD}"
    ports:
      - "5432:5432"

  nginx:
    image: nginx:latest
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf:/etc/nginx/conf.d:ro
    ports:
      - "80:80"

  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - zookeeper
    expose:
      - '29092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'

#  control-center:
#    image: confluentinc/cp-enterprise-control-center:7.4.1
#    hostname: control-center
#    container_name: control
#    depends_on:
#      - kafka
#    ports:
#      - "9021:9021"
#    environment:
#      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka:29092'
#      CONTROL_CENTER_REPLICATION_FACTOR: 1
#      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
#      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
#      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
#      PORT: 9021

  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic yookassa-log --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic ready-topic --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "

  check_payment_consumer:
    build: ./check_payment_consumer
    restart: on-failure
    env_file:
      - ./.env
    depends_on:
      - init-kafka

  status_payment_consumer:
    build: ./status_payment_consumer
    restart: on-failure
    env_file:
      - ./.env
    depends_on:
      - init-kafka

  auth_service:
    build:
      context: ./auth_app
      dockerfile: ./Dockerfile
    env_file:
      - auth_app/.env
    volumes:
      - ./auth_app:/app

  redis:
    image: redis:7.0.8
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
      - ../redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 1s
      timeout: 3s
      retries: 30

volumes:
  postgres_data: